var http = require('http');
var fs = require('fs');
//测试是否成功更新远程 
var server = http.createServer(function (req,res){
    res.writeHead(200,{'Content-Type':'text/plain'});
    res.end();
}).listen(3000,"127.0.0.1");

console.log('Server running at http://127.0.0.1:3000/');
 
var io = require('socket.io').listen(server);

io.sockets.on('connection',function(socket){
    console.log('socket已连接');

    // 模拟数据接收
    let buf = Buffer.from([0xff,0xfd,0x0f,0x41,0xd0,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xbb
    ]);
    let bufs = Buffer.from([0xff,0xfd,0x0f,0x41,0xd0,0x00,0x00,0x41,0x22,0xff,0xff,0x36,0x00,0xff,0xff,0x20,0x00,0xff,0xff,0x00,0x26,0xff,0xff,0x26,0x00,0xff,0xff,0x00,0x25,0xff,0xff,0x00,0x00,0xff,0xff,0x23,0x00,0xff,0xff,0x00,0x25,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0xbb
    ]);
    let n = 0;
    setInterval(function(){
        n++;
        if(n%2){
            socket.emit('message',buf)
        }else{
            socket.emit('message',bufs)
        }
        //向前台发送数据事件
        
    },1000)

    //接收前台数据
    socket.on('test',function(data){
        console.log(data);
    });

    //断开连接监听
    socket.on('disconnect',function(){
        console.log('断开连接');
    });
});


